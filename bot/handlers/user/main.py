import logging
from datetime import datetime

from typing import TYPE_CHECKING
from aiogram import html
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from fluentogram import TranslatorRunner
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, ChatMemberBanned, \
    ChatMemberUpdated
from aiogram_dialog import DialogManager, StartMode, ShowMode
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from bot.database.crud.create import add_moderation_vote
from bot.database.crud.get import get_user_tg_id, get_moderation_votes
from bot.database.requests import upsert_user
from bot.database.crud.update import update_user_moderation_status
from bot.handlers.admin.moderation import notify_admins_about_new_user
from bot.dialogs.user.account.dialogs import account_dialog
from bot.dialogs.user.main.dialogs import (
    start_dialog,
    faq_dialog,
    support_dialog
)
from bot.dialogs.user.subscription.dialogs import subscription_general_dialog
from bot.filters.main import IsBannedMessage, IsBannedCallback
from bot.keyboards.user_inline import back_btn
from bot.misc import Config
from bot.misc.callback_data import ReplyMessage
from bot.service.Payments.Stars import stars_router
from bot.states.state_user import StartSG, StateSubscription

if TYPE_CHECKING:
    from bot.locales.stub import TranslatorRunner

user_router = Router()
user_router.include_routers(
    stars_router,
    start_dialog,
    faq_dialog,
    support_dialog,
    subscription_general_dialog,
    account_dialog
)
user_router.message.filter(IsBannedMessage())
user_router.callback_query.filter(IsBannedCallback())

class StateReply(StatesGroup):
    input_message = State()


@user_router.message(CommandStart())
async def process_start_command(
        message: Message,
        dialog_manager: DialogManager,
        session: AsyncSession,
        i18n: TranslatorRunner
) -> None:
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"START COMMAND RECEIVED from user {message.from_user.id}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = message.from_user.id in Config.ADMINS_ID
    logging.info(f"User {message.from_user.id} is_admin: {is_admin}, ADMINS_ID: {Config.ADMINS_ID}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = await get_user_tg_id(session, message.from_user.id)
    logging.info(f"User database check: {user is not None}, user moderation status: {user.moderation_status if user else None}")
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é
    if user is None:
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º –µ–≥–æ
        moderation_status = True if is_admin else None
        
        await upsert_user(
            session=session,
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            fullname=message.from_user.full_name,
            lang_tg=message.from_user.language_code,
            moderation_status=moderation_status  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        )
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    if not is_admin:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        needs_moderation = True
        if user is not None and user.moderation_status is not None:
            needs_moderation = not user.moderation_status
            logging.info(f"User {message.from_user.id} moderation status: {user.moderation_status}")
        
        if needs_moderation:
            logging.info(f"User {message.from_user.id} is not admin, sending to moderation")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –æ–∂–∏–¥–∞–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            await message.answer(i18n.user.text.moderation.waiting())
            
            # –ù–∞–ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            logging.info(f"CRITICAL: Sending direct notifications to admins about new user: {message.from_user.id}")
            
            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logging.info(f"CRITICAL: Admin IDs from config: {Config.ADMINS_ID}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = [
                f"üîî <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏!</b>",
                f"üîë <b>ID:</b> <code>{message.from_user.id}</code>"
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if message.from_user.full_name:
                user_info.append(f"üë§ <b>–ò–º—è:</b> {message.from_user.full_name}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if message.from_user.username:
                user_info.append(f"üì≤ <b>Username:</b> @{message.from_user.username}")
                user_info.append(f"üîó <b>–°—Å—ã–ª–∫–∞:</b> <a href='https://t.me/{message.from_user.username}'>@{message.from_user.username}</a>")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if message.from_user.language_code:
                user_info.append(f"üåê <b>–Ø–∑—ã–∫:</b> {message.from_user.language_code}")
                
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            from datetime import datetime
            registration_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            user_info.append(f"üìÖ <b>–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {registration_time}")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            notification_text = "\n".join(user_info)
                
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        callback_data=f"moderationvote_{message.from_user.id}_true"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        callback_data=f"moderationvote_{message.from_user.id}_false"
                    )
                ]
            ])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            notification_sent = False
            for admin_id in Config.ADMINS_ID:
                try:
                    logging.info(f"CRITICAL: Trying to send notification to admin {admin_id}")
                    await message.bot.send_message(
                        chat_id=admin_id,
                        text=notification_text,
                        reply_markup=keyboard
                    )
                    logging.info(f"CRITICAL: Successfully sent direct notification to admin: {admin_id}")
                    notification_sent = True
                except Exception as e:
                    logging.error(f"CRITICAL: Error sending direct notification to admin {admin_id}: {e}")
            
            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            if not notification_sent:
                logging.error("CRITICAL: Failed to send notifications to any admin from the config list!")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            status_message = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã" if notification_sent else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            logging.info(f"CRITICAL: Status of notifications: {status_message}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä—è–º—É—é
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã
                rules_message = i18n.user.text.group_rules()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑ –∫–Ω–æ–ø–∫–∏
                await message.answer(
                    text=rules_message,
                    parse_mode='HTML'
                )
                
                logging.info(f"Successfully sent rules directly to user: {message.from_user.id}")
            except Exception as e:
                logging.error(f"Error sending rules directly to user {message.from_user.id}: {e}")
            
            
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–º—É –º–µ–Ω—é —Å—Ä–∞–∑—É
        user = await get_user_tg_id(session, message.from_user.id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if not is_admin and user.moderation_status is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
        await message.answer(i18n.user.text.moderation.waiting())
        return
    elif not is_admin and user.moderation_status is False:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é
        logging.info(f"User {message.from_user.id} was previously rejected, resetting moderation status")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ update_user_moderation_status
        statement = select(User).filter(User.telegram_id == message.from_user.id)
        result = await session.execute(statement)
        user = result.scalar_one_or_none()
        if user is not None:
            user.moderation_status = None
            await session.commit()
            logging.info(f"Reset moderation status for user {message.from_user.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await message.answer(i18n.user.text.moderation.waiting())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        await notify_admins_about_new_user(
            message.bot,
            message.from_user.id,
            message.from_user.username,
            message.from_user.full_name,
            i18n
        )
        
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–æ —É –Ω–µ–≥–æ –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
    if is_admin and user.moderation_status is None:
        from bot.database.crud.update import update_user_moderation_status
        await update_user_moderation_status(session, message.from_user.id, True)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await dialog_manager.start(state=StartSG.start, mode=StartMode.RESET_STACK)


@user_router.callback_query(lambda c: c.data and c.data.startswith("moderationvote_"))
async def process_moderation_vote_callback(callback: types.CallbackQuery,session:AsyncSession,i18n: TranslatorRunner):
    callback_data = callback.data
    approved = True if callback.data.split("_")[-1] == "true" else False
    user_id = int(callback.data.split("_")[-2])

    logging.info(
        f"CRITICAL: Received moderation vote callback from admin {callback.from_user.id} for user {user_id}")
    logging.info(f"CRITICAL: Vote details - approved: {approved}, callback_id: {callback.id}")
    logging.info(f"CRITICAL: Full callback data: {callback_data}")
    logging.info(f"CRITICAL: Callback message: {callback.message.message_id if callback.message else 'None'}")
    logging.info(
        f"CRITICAL: Admin info: {callback.from_user.id}, {callback.from_user.username}, {callback.from_user.full_name}")
    logging.info(f"CRITICAL: Current time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logging.info(f"CRITICAL: Bot info: {callback.bot.id}")

    try:
        logging.info(f"Admin {callback.from_user.id} voted for user {user_id}, approved: {approved}")
    except Exception as e:
        logging.error(f"CRITICAL: Error in initial logging: {e}")

    current_user = await get_user_tg_id(session, user_id)
    if current_user and current_user.moderation_status is True and approved is True:
        logging.info(f"User {user_id} is already approved, skipping moderation process")
        await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        try:
            await callback.message.delete()
            logging.info(f"Deleted moderation message for admin {callback.from_user.id} after skipping")
        except Exception as e:
            logging.error(f"Error deleting moderation message: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            await callback.bot.send_message(
                chat_id=callback.from_user.id,
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} —É–∂–µ –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω —Ä–∞–Ω–µ–µ."
            )
        except Exception as e:
            logging.error(f"Error sending notification to admin {callback.from_user.id}: {e}")

        return

    vote = await add_moderation_vote(
        session=session,
        user_id=user_id,
        admin_id=callback.from_user.id,
        approved=approved
    )

    if vote is None:
        logging.error(f"Error adding vote for user {user_id} by admin {callback.from_user.id}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    try:
        logging.info(f"CRITICAL: Getting all votes for user {user_id}")
        votes = await get_moderation_votes(session, user_id)
        logging.info(f"CRITICAL: Received {len(votes)} votes for user {user_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≥–æ–ª–æ—Å
        for i, vote in enumerate(votes):
            logging.info(f"CRITICAL: Vote {i + 1} details - admin_id: {vote.admin_id}, approved: {vote.approved}")

        if not votes:
            logging.error(f"CRITICAL: No votes found for user {user_id}")

            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å –Ω–∞–ø—Ä—è–º—É—é
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞ –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                from bot.database.crud.get import get_user_moderation_vote
                direct_vote = await get_user_moderation_vote(session, user_id, callback.from_user.id)
                if direct_vote:
                    logging.info(
                        f"CRITICAL: Found direct vote for user {user_id} from admin {callback.from_user.id}")
                    votes = [direct_vote]
                else:
                    logging.error(
                        f"CRITICAL: No direct vote found for user {user_id} from admin {callback.from_user.id}")
                    await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
            except ImportError:
                # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å
                logging.info(f"CRITICAL: get_user_moderation_vote not found, using current vote")
                votes = [vote]
    except Exception as e:
        logging.error(f"CRITICAL: Error getting votes: {e}")
        import traceback
        logging.error(f"CRITICAL: Traceback: {traceback.format_exc()}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user = await get_user_tg_id(session, user_id)
    if not user:
        logging.error(f"User {user_id} not found in database")
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        from sqlalchemy import select, desc
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–∏ User
        from bot.database.models.main import User

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ subscription –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        stmt = select(User).filter(User.telegram_id == user_id).order_by(desc(User.subscription))
        result = await session.execute(stmt)
        all_user_records = result.scalars().all()

        if not all_user_records:
            logging.error(f"No user records found for user {user_id} in database")
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        latest_user = all_user_records[0] if all_user_records else None

        if latest_user and latest_user.id != user.id:
            logging.info(f"Found newer moderation request for user {user_id}. Using that instead.")
            user = latest_user
            logging.info(f"Switched to newer request: user ID {user.id}, subscription time {user.subscription}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ ID –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        user_record_ids = [record.id for record in all_user_records]
        logging.info(f"Found {len(user_record_ids)} records for user {user_id}: {user_record_ids}")
    except Exception as e:
        logging.error(f"Error checking for user records: {e}")
        import traceback
        logging.error(f"Traceback: {traceback.format_exc()}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        user_record_ids = [user.id] if user else []

    total_admins = 7  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 1 –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
    total_votes = len(votes)
    approved_votes = sum(1 for vote in votes if vote.approved)
    rejected_votes = sum(1 for vote in votes if not vote.approved)  # –Ø–≤–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤

    any_rejected = rejected_votes > 0  # –õ—é–±–æ–π –≥–æ–ª–æ—Å –ø—Ä–æ—Ç–∏–≤
    any_approved = approved_votes > 0  # –õ—é–±–æ–π –≥–æ–ª–æ—Å –∑–∞
    all_voted = total_votes >= total_admins  # –í—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ (—Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω)
    majority_voted = True  # –í—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–∞, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≥–æ–ª–æ—Å

    logging.info(
        f"Votes for user {user_id}: total={total_votes}, approved={approved_votes}, rejected={rejected_votes}")
    logging.info(
        f"Decision criteria: any_rejected={any_rejected}, all_voted={all_voted}, majority_voted={majority_voted}")

    if any_rejected or any_approved:
        # –û–¥–æ–±—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ –ø—Ä–æ—Ç–∏–≤
        should_approve = not any_rejected
        logging.info(
            f"Making decision for user {user_id}: approved={should_approve}, approved_votes={approved_votes}, rejected_votes={rejected_votes}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        current_status = user.moderation_status if user else None
        logging.info(
            f"Current moderation status for user {user_id}: {current_status}, should be: {should_approve}")

        # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        # –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å "–∑–∞–≤–∏—Å–∞–Ω–∏–µ–º" –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        status_text = "–æ–¥–æ–±—Ä–µ–Ω" if should_approve else "–æ—Ç–∫–ª–æ–Ω–µ–Ω"
        admin_notification = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –±—ã–ª {status_text}."
        logging.info(
            f"CRITICAL: Attempting to send notification to admin {callback.from_user.id} with text: {admin_notification}")

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_notification_in_background
            updated_user = await update_user_moderation_status(
                session=session,
                telegram_id=user_id,
                status=should_approve,  # –û–¥–æ–±—Ä—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –≥–æ–ª–æ—Å–æ–≤ –ø—Ä–æ—Ç–∏–≤
                bot=callback.bot,
                user_record_ids=user_record_ids  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ ID –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            )
            logging.info(f"Updated moderation status for user {user_id} to {should_approve}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            # –≠—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–æ –æ–Ω–æ –ø–æ–≤—ã—à–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
            # if should_approve:
            #     try:
            #         # notification_text = "–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
            #         await callback.bot.send_message(chat_id=user_id, text=notification_text)
            #         logging.info(f"CRITICAL: Direct notification sent to user {user_id} about approval")
            #     except Exception as e:
            #         logging.error(f"CRITICAL: Error sending direct notification to user {user_id}: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await callback.bot.send_message(chat_id=callback.from_user.id, text=admin_notification)
            logging.info(f"CRITICAL: Successfully sent moderation result notification to admin {callback.from_user.id}")
        except Exception as e:
            logging.error(f"CRITICAL: Failed to send notification to admin {callback.from_user.id}: {e}")
            import traceback
            logging.error(f"CRITICAL: Traceback: {traceback.format_exc()}")

        # –£–¥–∞–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ else, —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        # –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å "–∑–∞–≤–∏—Å–∞–Ω–∏–µ–º" –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    else:
        logging.info(f"Not enough votes to make a decision for user {user_id} yet")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∞–¥–º–∏–Ω –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª
    try:
        await callback.message.delete()
        logging.info(f"Deleted moderation message for admin {callback.from_user.id} after voting")
    except Exception as e:
        logging.error(f"Error deleting moderation message: {e}")
    # –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –µ–≥–æ –≥–æ–ª–æ—Å–µ
    vote_type = "–û–î–û–ë–†–ï–ù–ò–ï" if approved else "–û–¢–ö–õ–û–ù–ï–ù–ò–ï"
    try:
        await callback.bot.send_message(
            chat_id=callback.from_user.id,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} - –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {vote_type}"
        )
    except Exception as e:
        logging.error(f"Error sending notification to admin {callback.from_user.id}: {e}")

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    vote_text = "–æ–¥–æ–±—Ä–µ–Ω–∏–µ" if approved else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"
    await callback.answer(i18n.admin.text.moderation.vote_counted(vote_type=vote_text))

@user_router.callback_query(F.data == 'answer_back_general_menu_btn')
async def process_start_command(
        callback: CallbackQuery,
        dialog_manager: DialogManager
) -> None:
    await dialog_manager.start(
        state=StartSG.start,
        mode=StartMode.RESET_STACK,
        show_mode=ShowMode.SEND,
    )
    await callback.answer()


@user_router.callback_query(F.data == 'subscribe_btn')
async def process_start_command(
        callback: CallbackQuery,
        dialog_manager: DialogManager
) -> None:
    await dialog_manager.start(
        state=StateSubscription.subscription_general,
        mode=StartMode.RESET_STACK,
    )
    await callback.answer()


@user_router.chat_join_request()
async def process_start_command(
        update: types.ChatJoinRequest,
        session: AsyncSession,
        i18n: TranslatorRunner,
        dialog_manager: DialogManager
) -> None:
    user = await get_user_tg_id(session, update.from_user.id)
    if user is None:
        await upsert_user(
            session=session,
            telegram_id=update.from_user.id,
            username=update.from_user.username,
            fullname=update.from_user.full_name,
            lang_tg=update.from_user.language_code
        )
        user = await get_user_tg_id(session, update.from_user.id)

    if user.blocked:
        return

    if user.status_subscription:
        await update.approve()
        await update.bot.send_message(
            chat_id=update.from_user.id,
            text=i18n.user.text.subscription.approv(),
        )
    else:
        await update.bot.send_message(
            chat_id=update.from_user.id,
            text=i18n.user.text.subscription.approve.none(),
            reply_markup=await back_btn(i18n)
        )


@user_router.callback_query(ReplyMessage.filter())
async def reply_message(
        callback_query: CallbackQuery,
        i18n: TranslatorRunner,
        dialog_manager: DialogManager,
        state: FSMContext,
        callback_data: ReplyMessage
) -> None:
    await callback_query.message.answer(
        i18n.admin.text.support.reply()
    )
    await state.update_data(
        id_client=callback_data.id_client,
        message_id = callback_query.message.message_id
    )
    await state.set_state(StateReply.input_message)
    await callback_query.answer()


@user_router.message(StateReply.input_message)
async def reply_message(
        message: Message,
        i18n: TranslatorRunner,
        dialog_manager: DialogManager,
        state: FSMContext,
) -> None:
    data = await state.get_data()
    await message.bot.send_message(
        data['id_client'],
        i18n.user.text.support.reply()
    )
    try:
        await message.send_copy(data['id_client'])
        await message.bot.edit_message_reply_markup(
            chat_id=message.from_user.id,
            message_id=data['message_id']
        )
        for admin in Config.ADMINS_ID:
            if admin == message.from_user.id:
                continue
            await message.bot.send_message(
                admin,
                text=i18n.admin.text.support.reply.all(
                    admin_name=html.quote(message.from_user.full_name),
                    user_id=str(data['id_client'])
                )
            )
            await message.send_copy(admin)

    except Exception as e:
        logging.exception(e)
    await state.clear()