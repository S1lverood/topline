import logging
import asyncio
from datetime import datetime
from typing import TYPE_CHECKING

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from fluentogram import TranslatorRunner
from sqlalchemy.ext.asyncio import AsyncSession

from bot.database.crud.create import add_moderation_vote
from bot.database.crud.get import get_user_tg_id, get_moderation_votes
from bot.database.crud.update import update_user_moderation_status
from bot.keyboards.admin_inline import moderation_keyboard
from bot.misc import Config
from bot.misc.callback_data import ModerationVoteCallback, RulesAcceptCallback

if TYPE_CHECKING:
    from bot.locales.stub import TranslatorRunner

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
moderation_router = Router()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
__all__ = ["moderation_router", "notify_admins_about_new_user", "send_guaranteed_message", "process_rules_accept"]


async def send_guaranteed_message(bot, user_id: int, text: str, reply_markup=None, parse_mode=None) -> bool:
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :param parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :return: True –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    success = False
    attempts = 0
    max_attempts = 3
    
    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    while not success and attempts < max_attempts:
        attempts += 1
        
        # –ú–µ—Ç–æ–¥ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ send_message
        try:
            await bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode)
            logging.info(f"CRITICAL: Message sent to user {user_id} using standard method (attempt {attempts})")
            success = True
            break
        except Exception as e:
            logging.error(f"CRITICAL: Error sending message to user {user_id} using standard method (attempt {attempts}): {e}")
            await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        
        # –ú–µ—Ç–æ–¥ 2: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API
        try:
            from aiogram.methods.send_message import SendMessage
            result = await bot(SendMessage(chat_id=user_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode))
            logging.info(f"CRITICAL: Message sent to user {user_id} using direct API (attempt {attempts}): {result}")
            success = True
            break
        except Exception as e:
            logging.error(f"CRITICAL: Error sending message to user {user_id} using direct API (attempt {attempts}): {e}")
            await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not success:
        try:
            from aiogram.methods.send_message import SendMessage
            # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            simple_text = "–í—ã –±—ã–ª–∏ –æ–¥–æ–±—Ä–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."
            result = await bot(SendMessage(chat_id=user_id, text=simple_text))
            logging.info(f"CRITICAL: Simple message sent to user {user_id} using direct API: {result}")
            success = True
        except Exception as e:
            logging.error(f"CRITICAL: Error sending simple message to user {user_id} using direct API: {e}")
    
    return success


async def send_notification_in_background(bot: Bot, user_id: int, status: bool):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param status: True - –æ–¥–æ–±—Ä–µ–Ω, False - –æ—Ç–∫–ª–æ–Ω–µ–Ω
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if status:
            notification_text = "–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
        else:
            notification_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –±–æ—Ç—É."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success = await send_guaranteed_message(
            bot=bot,
            user_id=user_id,
            text=notification_text
        )
        
        logging.info(f"CRITICAL: Notification sent to user {user_id}, status: {status}, success: {success}")
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        if status and success:
            welcome_message = (
                "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–ª—É–±!</b> üéâ\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞."
            )
            
            await send_guaranteed_message(
                bot=bot,
                user_id=user_id,
                text=welcome_message,
                parse_mode='HTML'
            )
            
            logging.info(f"CRITICAL: Welcome message sent to user {user_id}")
    
    except Exception as e:
        logging.error(f"CRITICAL: Error sending notification to user {user_id}: {e}")
        
    # –û—á–∏—â–∞–µ–º –≥–æ–ª–æ—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        from bot.database.crud.delete import delete_moderation_votes
        from sqlalchemy.ext.asyncio import AsyncSession
        from bot.database.main import get_session
        
        async with get_session() as session:
            session: AsyncSession
            await delete_moderation_votes(session, user_id)
            logging.info(f"CRITICAL: Moderation votes cleared for user {user_id}")
    except Exception as e:
        logging.error(f"CRITICAL: Error clearing moderation votes for user {user_id}: {e}")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞"
@moderation_router.callback_query(F.data == "start_bot")
async def process_start_bot_callback(
        callback: CallbackQuery,
        session: AsyncSession,
        i18n: TranslatorRunner
):
    logging.info(f"CRITICAL: Processing start_bot callback for user {callback.from_user.id}")
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫
        await callback.answer("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
            logging.info(f"CRITICAL: Button removed from message for user {callback.from_user.id}")
        except Exception as e:
            logging.error(f"CRITICAL: Error removing button from message for user {callback.from_user.id}: {e}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start
        from bot.handlers.user.main import process_start_command
        from aiogram.types import Message
        from aiogram_dialog import DialogManager
        from aiogram.types.user import User
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start
            fake_message = Message(
                message_id=0,
                date=datetime.now(),
                chat=callback.message.chat,
                from_user=callback.from_user,
                sender_chat=callback.message.chat,
                text="/start",
                bot=callback.bot
            )
            
            # –ù–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
            from aiogram_dialog import DialogManager
            dialog_manager = DialogManager(callback, None)
            
            # –í—ã–∑—ã–≤–∞–µ–º process_start_command —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            await process_start_command(fake_message, dialog_manager, session, i18n)
            
            logging.info(f"CRITICAL: Successfully emulated /start command for user {callback.from_user.id}")
        except Exception as e:
            logging.error(f"CRITICAL: Error emulating /start command for user {callback.from_user.id}: {e}")
            
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
            from aiogram.methods.send_message import SendMessage
            from aiogram.enums import ParseMode
            
            try:
                welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
                await callback.bot(SendMessage(
                    chat_id=callback.from_user.id,
                    text=welcome_text,
                    parse_mode=ParseMode.HTML
                ))
                logging.info(f"CRITICAL: Sent fallback welcome message to user {callback.from_user.id}")
            except Exception as e2:
                logging.error(f"CRITICAL: Error sending fallback welcome message to user {callback.from_user.id}: {e2}")
        
        logging.info(f"CRITICAL: User {callback.from_user.id} started using the bot after moderation approval")
    except Exception as e:
        logging.error(f"CRITICAL: Error processing start_bot callback for user {callback.from_user.id}: {e}")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª
async def process_rules_accept(callback: CallbackQuery, i18n: TranslatorRunner):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    try:
        await callback.message.edit_text(
            text=i18n.user.text.rules_accepted(),
            reply_markup=None
        )
        await callback.answer(i18n.user.text.rules_accepted_notification())
        logging.info(f"User {callback.from_user.id} accepted the rules")
    except Exception as e:
        logging.error(f"Error processing rules acceptance for user {callback.from_user.id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª
@moderation_router.callback_query(RulesAcceptCallback.filter())
async def handle_rules_accept(callback: CallbackQuery, i18n: TranslatorRunner):
    await process_rules_accept(callback, i18n)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
@moderation_router.callback_query(ModerationVoteCallback.filter())
async def process_moderation_vote(
        callback: CallbackQuery,
        callback_data: ModerationVoteCallback,
        session: AsyncSession,
        i18n: TranslatorRunner
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logging.info(f"Admin {callback.from_user.id} voted for user {callback_data.user_id}, approved: {callback_data.approved}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    vote = await add_moderation_vote(
        session=session,
        user_id=callback_data.user_id,
        admin_id=callback.from_user.id,
        approved=callback_data.approved
    )
    
    if vote is None:
        logging.error(f"Error adding vote for user {callback_data.user_id} by admin {callback.from_user.id}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    votes = await get_moderation_votes(session, callback_data.user_id)
    if not votes:
        logging.error(f"No votes found for user {callback_data.user_id}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await get_user_tg_id(session, callback_data.user_id)
    if not user:
        logging.error(f"User {callback_data.user_id} not found in database")
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
    total_admins = 6  # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º 2 –∞–¥–º–∏–Ω–∞
    total_votes = len(votes)
    approved_votes = sum(1 for vote in votes if vote.approved)
    rejected_votes = sum(1 for vote in votes if not vote.approved)  # –Ø–≤–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
    
    any_rejected = rejected_votes > 0
    all_voted = total_votes >= total_admins
    majority_voted = total_votes >= (total_admins // 2 + 1)  # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ
    
    logging.info(f"Votes for user {callback_data.user_id}: total={total_votes}, approved={approved_votes}, rejected={rejected_votes}")
    logging.info(f"Decision criteria: any_rejected={any_rejected}, all_voted={all_voted}, majority_voted={majority_voted}")
    
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—Å–µ –∞–¥–º–∏–Ω—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏, –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ –∏–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–æ–ª–æ—Å –ø—Ä–æ—Ç–∏–≤
    if all_voted or any_rejected or majority_voted:
        # –û–¥–æ–±—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ –ø—Ä–æ—Ç–∏–≤
        should_approve = not any_rejected
        logging.info(f"Making decision for user {callback_data.user_id}: approved={should_approve}, approved_votes={approved_votes}, rejected_votes={rejected_votes}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_notification_in_background
        user = await update_user_moderation_status(
            session=session,
            telegram_id=callback_data.user_id,
            status=should_approve,  # –û–¥–æ–±—Ä—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –≥–æ–ª–æ—Å–æ–≤ –ø—Ä–æ—Ç–∏–≤
            bot=callback.bot
        )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∞–¥–º–∏–Ω –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª
    try:
        await callback.message.delete()
        logging.info(f"Deleted moderation message for admin {callback.from_user.id} after voting")
    except Exception as e:
        logging.error(f"Error deleting moderation message: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –µ–≥–æ –≥–æ–ª–æ—Å–µ
    vote_type = "–û–î–û–ë–†–ï–ù–ò–ï" if callback_data.approved else "–û–¢–ö–õ–û–ù–ï–ù–ò–ï"
    try:
        await callback.bot.send_message(
            chat_id=callback.from_user.id,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {callback_data.user_id} - –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {vote_type}"
        )
    except Exception as e:
        logging.error(f"Error sending notification to admin {callback.from_user.id}: {e}")
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    vote_text = "–æ–¥–æ–±—Ä–µ–Ω–∏–µ" if callback_data.approved else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"
    await callback.answer(i18n.admin.text.moderation.vote_counted(vote_type=vote_text))


async def notify_admins_about_new_user(
        bot,
        user_id: int,
        username: str = None,
        fullname: str = None,
        i18n: TranslatorRunner = None,
        session: AsyncSession = None
):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    logging.info(f"Attempting to notify admins about new user: {user_id}, username: {username}, fullname: {fullname}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω —Ä–∞–Ω–µ–µ
    if session is not None:
        user = await get_user_tg_id(session, user_id)
        if user is not None and user.moderation_status is False:
            logging.info(f"User {user_id} was previously rejected, not sending to moderation again")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ
            await send_guaranteed_message(
                bot=bot,
                user_id=user_id,
                text=i18n.user.text.moderation.rejected()
            )
            return
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    logging.info(f"Admins to notify: {Config.ADMINS_ID}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in Config.ADMINS_ID:
        try:
            logging.info(f"Sending notification to admin: {admin_id}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            keyboard = await moderation_keyboard(i18n, user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_text = i18n.admin.text.moderation.new_user(
                user_id=user_id,
                username=username or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                fullname=fullname or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await bot.send_message(
                chat_id=admin_id,
                text=notification_text,
                reply_markup=keyboard
            )
            logging.info(f"Successfully sent notification to admin: {admin_id}")
                
        except Exception as e:
            logging.error(f"Error notifying admin {admin_id}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã, –ø–æ–∫–∞ –µ–≥–æ –∑–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã
        rules_message = i18n.user.text.group_rules()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑ –∫–Ω–æ–ø–∫–∏
        await send_guaranteed_message(
            bot=bot,
            user_id=user_id,
            text=rules_message,
            parse_mode='HTML'
        )
        
        logging.info(f"Successfully sent rules to user: {user_id}")
    except Exception as e:
        logging.error(f"Error sending rules to user {user_id}: {e}")
    
    logging.info("Finished notifying all admins about new user")

